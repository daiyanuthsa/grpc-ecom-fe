// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "common/pagination.proto" (package "common", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message common.PaginationSortRequest
 */
export interface PaginationSortRequest {
    /**
     * @generated from protobuf field: string field = 1
     */
    field: string;
    /**
     * @generated from protobuf field: string order = 2
     */
    order: string;
}
/**
 * @generated from protobuf message common.PaginationRequest
 */
export interface PaginationRequest {
    /**
     * @generated from protobuf field: int32 page = 1
     */
    page: number;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
    /**
     * @generated from protobuf field: repeated common.PaginationSortRequest sort = 3
     */
    sort: PaginationSortRequest[];
}
/**
 * @generated from protobuf message common.PaginationResponse
 */
export interface PaginationResponse {
    /**
     * @generated from protobuf field: int32 page = 1
     */
    page: number;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 total_pages = 3
     */
    totalPages: number;
    /**
     * @generated from protobuf field: int32 total_elements = 4
     */
    totalElements: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class PaginationSortRequest$Type extends MessageType<PaginationSortRequest> {
    constructor() {
        super("common.PaginationSortRequest", [
            { no: 1, name: "field", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "order", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PaginationSortRequest>): PaginationSortRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.field = "";
        message.order = "";
        if (value !== undefined)
            reflectionMergePartial<PaginationSortRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaginationSortRequest): PaginationSortRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field */ 1:
                    message.field = reader.string();
                    break;
                case /* string order */ 2:
                    message.order = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaginationSortRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field = 1; */
        if (message.field !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.field);
        /* string order = 2; */
        if (message.order !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.order);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.PaginationSortRequest
 */
export const PaginationSortRequest = new PaginationSortRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaginationRequest$Type extends MessageType<PaginationRequest> {
    constructor() {
        super("common.PaginationRequest", [
            { no: 1, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "buf.validate.field": { int32: { gt: 0 } } } },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "buf.validate.field": { int32: { lte: 100, gt: 0 } } } },
            { no: 3, name: "sort", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PaginationSortRequest }
        ]);
    }
    create(value?: PartialMessage<PaginationRequest>): PaginationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.limit = 0;
        message.sort = [];
        if (value !== undefined)
            reflectionMergePartial<PaginationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaginationRequest): PaginationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* repeated common.PaginationSortRequest sort */ 3:
                    message.sort.push(PaginationSortRequest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaginationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* repeated common.PaginationSortRequest sort = 3; */
        for (let i = 0; i < message.sort.length; i++)
            PaginationSortRequest.internalBinaryWrite(message.sort[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.PaginationRequest
 */
export const PaginationRequest = new PaginationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaginationResponse$Type extends MessageType<PaginationResponse> {
    constructor() {
        super("common.PaginationResponse", [
            { no: 1, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "total_pages", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "total_elements", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PaginationResponse>): PaginationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.limit = 0;
        message.totalPages = 0;
        message.totalElements = 0;
        if (value !== undefined)
            reflectionMergePartial<PaginationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaginationResponse): PaginationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* int32 total_pages */ 3:
                    message.totalPages = reader.int32();
                    break;
                case /* int32 total_elements */ 4:
                    message.totalElements = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaginationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* int32 total_pages = 3; */
        if (message.totalPages !== 0)
            writer.tag(3, WireType.Varint).int32(message.totalPages);
        /* int32 total_elements = 4; */
        if (message.totalElements !== 0)
            writer.tag(4, WireType.Varint).int32(message.totalElements);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.PaginationResponse
 */
export const PaginationResponse = new PaginationResponse$Type();
